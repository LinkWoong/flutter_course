import 'dart:io';
import 'package:dio/dio.dart';
import 'package:scoped_model/scoped_model.dart';
import 'dart:convert';
import '../models/product.dart';
import '../models/user.dart';
import 'package:http/http.dart' as http;

mixin ConnectedProducts on Model {
  List<Product> _products = [];
  User _authenticatedUser;
  int _selProductIndex;
  void addProduct(
      // TODO: Send data to the server
      String title,
      String description,
      String image,
      double price) {
    final Map<String, dynamic> productData = {
      'title': title,
      'description': description,
      'image':
          'https://cdn.newsapi.com.au/image/v1/551af2930c81cf6c4aaa1c5d9f1c075f',
      'price': price.toString()
    };

    // Convert the Map productData to Json
    // post the product and save the returned unique id
    Future<Response> response = postProduct(json.encode(productData));
    response.then((Response response){
      final Map<String, dynamic> responseData = json.decode(response.data);
      print(responseData);
      final Product newProduct = Product(
          id: responseData['name'],
          title: title,
          description: description,
          image: image,
          price: price,
          userEmail: _authenticatedUser.email,
          userId: _authenticatedUser.id);
      _products.add(newProduct);
      notifyListeners();
    });
    // After the POST, we will receive a unique ID, which is generated by Firebase, and also a response.
    // This unique ID is the one that will be used for editing, deleting the item we added under ./products node
  }

  // POST the data to given url, Firebase requires a .json at the end
  Future<Response> postProduct(String productData) async {
    var dio = new Dio();
    (dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate =
        (HttpClient client) {
      client.findProxy = (uri) {
        //proxy all request to localhost:8888
        return "PROXY 127.0.0.1:1087";
      };
      client.badCertificateCallback =
          (X509Certificate cert, String host, int port) => true;
    };
    Response<String> response;
    response = await dio.post(
        'https://flutter-products-82ea3.firebaseio.com/product.json',
        data: productData);
    print(response.statusCode);
    return response;
  }
}

mixin ProductsModel on ConnectedProducts {
  bool _showFavorites = false;

  // remove the viewed product
  void deleteProduct() {
    _products.removeAt(_selProductIndex);
    notifyListeners();
  }

  void fetchProducts() async {
    var dio = new Dio();
    (dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate =
        (HttpClient client) {
      client.findProxy = (uri) {
        //proxy all request to localhost:8888
        return "PROXY 127.0.0.1:1087";
      };
      client.badCertificateCallback =
          (X509Certificate cert, String host, int port) => true;
    };
    dio.get('https://flutter-products-82ea3.firebaseio.com/product.json').then((Response response){
      print(response.data);
      // print(json.decode(response.data));
    });
  }

  void updateProduct(
      String title, String description, String image, double price) {
    final Product newProduct = Product(
        title: title,
        description: description,
        image: image,
        price: price,
        userEmail: selectedProduct.userEmail,
        userId: selectedProduct.userId);
    _products[selectedProductIndex] = newProduct;
    notifyListeners();
  }

  void selectProduct(int index) {
    _selProductIndex = index;
    notifyListeners();
  }

  // editing the favorite status then overwrite previous one
  void toggleProductFavoriteStatus() {
    final bool isCurrentlyFavorite = selectedProduct.isFavorite;
    final bool newFavoriteStatus = !isCurrentlyFavorite;
    final Product updateProduct = Product(
        title: selectedProduct.title,
        description: selectedProduct.description,
        price: selectedProduct.price,
        image: selectedProduct.image,
        userEmail: selectedProduct.userEmail,
        userId: selectedProduct.userId,
        isFavorite: newFavoriteStatus);

    _products[selectedProductIndex] = updateProduct;
    notifyListeners(); // update all scoped model listeners so that they re-render their builder methods
  }

  void toggleDisplayMode() {
    _showFavorites = !_showFavorites;
    notifyListeners();
  }

  // return a brand new list to avoid direct add on original list
  // such as _products.add(Product());
  List<Product> get allProducts {
    return List.from(_products);
  }

  List<Product> get displayProducts {
    if (_showFavorites) {
      return _products.where((Product product) => product.isFavorite).toList();
      // return the elements which isFavorite property is true
    }
    return List.from(_products);
  }

  int get selectedProductIndex {
    return _selProductIndex;
  }

  Product get selectedProduct {
    if (selectedProductIndex == null) {
      return null;
    }
    return _products[selectedProductIndex];
  }

  bool get displayFavoritesOnly {
    return _showFavorites;
  }
}

mixin UserModel on ConnectedProducts {
  void login(String email, String password) {
    _authenticatedUser =
        new User(id: 'c13063716100', email: email, password: password);
  }
}
